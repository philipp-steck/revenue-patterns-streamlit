import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

@st.cache_data
def plot_1(df_aggregate_payments):
    """Generate and display a correlation matrix plot for aggregated payment values at each day using Spearman correlation"""
    correlation_matrix = df_aggregate_payments.loc[:, ~df_aggregate_payments.columns.isin(['user_id'])].corr(method='spearman')
    reversed_corr_matrix = correlation_matrix.iloc[::-1]

    you_vs_industry = correlation_matrix.loc['D3', 'D31']
    st.divider()
    st.write('')

    fig, ax = plt.subplots(figsize=(10,8))
    sns.heatmap(reversed_corr_matrix, annot=True, cmap=sns.color_palette("Blues_r", as_cmap=True), linewidths=0.5,
                fmt=".3f",
                square=True, cbar_kws={"shrink":0.75, "label": "Correlation Score"})
    ax.set_title('Correlation Matrix of Aggregated Payment Values')
    plt.yticks(rotation=0)
    plt.subplots_adjust(bottom=0.2)

    col1, col2 = st.columns([2, 1])
    with col1:
        st.pyplot(fig)
    with col2:
        st.metric(label="TL;DR", value=round(you_vs_industry,3))
        st.markdown('''<div style="text-align: left;">
             Correlation score between day 3 and day 31.      
        </div>''', unsafe_allow_html=True)

    st.write()
    container = st.container(border=False)
    container.markdown(f'''<div style="text-align: justify;">
    For example, looking at the image above, one can predict {round(you_vs_industry,3)*100}% of the valuable customers 
    and their relative importance by day 31 by knowing the valuable customers on day 3. 
    This helps assess whether optimizing for or targeting the early valuable customers aligns well with the true long-term business objectives related to customer value.
    </div>''', unsafe_allow_html=True)
    container.write('')

st.set_page_config(
    initial_sidebar_state="collapsed" 
)

st.markdown('## Short to long-term overall revenue correlation')
st.markdown('''<div style="text-align: justify;">
    This tool comprehensively evaluates the relationship between early and late revenue. 
    It quantifies how well identifying valuable customers early on can predict which customers will remain valuable later 
    and how their relative importance to the overall revenue generated by your business evolves over time.
    </div>''', unsafe_allow_html=True)

if 'df_aggregate_payments' not in st.session_state:
    st.write('')
    st.warning("To get up and running, please upload your data on the main page.")
    st.stop()
else:
    df_aggregate_payments = st.session_state['df_aggregate_payments']
    days_list = st.session_state['days_list']

plot_1(df_aggregate_payments)
st.write('')
if st.button("Next Page"):
    st.switch_page("pages/page_3.py")